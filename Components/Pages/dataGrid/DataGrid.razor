@using System.Net.Http.Json
@rendermode InteractiveServer
@page "/datagrid-example"
<MudDataGrid T="Product" MultiSelection="true" DragIndicatorIcon="@Icons.Material.Filled.DragIndicator" DragDropColumnReordering="true" Virtualize="true" ColumnResizeMode="@(ResizeMode.Container)" Items="@Products" SortMode="SortMode.Multiple" Filterable="true"  QuickFilter="@QuickFilter"
             Hideable="true" RowClick="RowClicked" SelectedItemsChanged="SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Lista de Produtos</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="SearchText" Placeholder="Pesquisar" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Product" />
        @* <PropertyColumn Property="x => x.Id" Title="ID" /> *@
        <PropertyColumn Property="x => x.Name" StickyLeft="true" Title="Nome do Produto" SortBy="@SortByName" DragAndDropEnabled="false" />
        <PropertyColumn Property="x => x.Category" Title="Categoria" />
        <PropertyColumn Property="x => x.Price" Title="Preço" />
        <PropertyColumn Property="x => x.Stock" Title="Estoque" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Product" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="SortByLength" Color="Color.Primary">Ordenar Nome por Tamanho</MudSwitch>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Eventos">
        @foreach (var eventMessage in Events)
        {
            <MudText Typo="@Typo.body2">@eventMessage</MudText>
        }
        @if (Events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="(() => Events.Clear())">Limpar</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private List<Product> Products = new()
    {
        new Product { Id = 1, Name = "Notebook", Category = "Eletrônicos", Price = 3500.00m, Stock = 10 },
        new Product { Id = 2, Name = "Smartphone", Category = "Eletrônicos", Price = 1500.00m, Stock = 25 },
        new Product { Id = 3, Name = "Teclado", Category = "Acessórios", Price = 200.00m, Stock = 50 },
        new Product { Id = 4, Name = "Mouse", Category = "Acessórios", Price = 120.00m, Stock = 40 },
        new Product { Id = 5, Name = "Monitor", Category = "Eletrônicos", Price = 800.00m, Stock = 15 }
    };

    private string SearchText;
    private bool SortByLength;
    private List<string> Events = new();

    // Ordenação personalizada por tamanho do nome
    private Func<Product, object> SortByName => x =>
    {
        if (SortByLength)
            return x.Name.Length;
        else
            return x.Name;
    };

    // Filtro rápido - pesquisa em várias colunas ao mesmo tempo
    private Func<Product, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(SearchText))
            return true;

        return x.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
               x.Category.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
               x.Price.ToString().Contains(SearchText) ||
               x.Id.ToString().Contains(SearchText);
    };

    // Eventos
    void RowClicked(DataGridRowClickEventArgs<Product> args)
    {
        Events.Insert(0, $"Linha clicada: ID={args.Item.Id}, Nome={args.Item.Name}");
    }

    void SelectedItemsChanged(HashSet<Product> items)
    {
        Events.Insert(0, $"Itens selecionados: {string.Join(", ", items.Select(x => x.Name))}");
    }

    // Modelo de dados
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Category { get; set; }
        public decimal Price { get; set; }
        public int Stock { get; set; }
    }
}
